# 配shardingsphere虚拟数据库，多库操作配置
#spring.shardingsphere.datasource.names=database1, database2
spring.shardingsphere.datasource.names=database1
# 配database1的数据源
spring.shardingsphere.datasource.database1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.database1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.database1.url=jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.database1.username=root
spring.shardingsphere.datasource.database1.password=123456

# 配database2的数据源
#spring.shardingsphere.datasource.database2.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.database2.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.database2.url=jdbc:mysql://localhost:3306/test2?useUnicode=true&characterEncoding=UTF-8
#spring.shardingsphere.datasource.database2.username=root
#spring.shardingsphere.datasource.database2.password=123456

## 标准分片表配置
## 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
#spring.shardingsphere.rules.sharding.tables.student.actual-data-nodes=database1.student_$->{0..2}
## 分片列名称
#spring.shardingsphere.rules.sharding.tables.student.table-strategy.standard.sharding-column=id
## 分片算法名称 自定义名称
#spring.shardingsphere.rules.sharding.tables.student.table-strategy.standard.sharding-algorithm-name=alg_inline_user_id
##------------------------分片算法配置
## 行表达式分片算法
## 分片算法类型
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_user_id.type=INLINE
## 分片算法属性配置$->{user_id % 2}
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_user_id.props.algorithm-expression=student_$->{id % 2}



# 标准分片表配置
# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
spring.shardingsphere.rules.sharding.tables.student.actual-data-nodes=database1.student_$->{['E008','E009']}_$->{0..1}
# 分片列名称
spring.shardingsphere.rules.sharding.tables.student.table-strategy.complex.sharding-columns=st_no,class_name
# 分片算法名称 自定义名称
spring.shardingsphere.rules.sharding.tables.student.table-strategy.complex.shardingAlgorithmName=alg_inline_user_id
#------------------------分片算法配置
# 行表达式分片算法
# 分片算法类型
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_user_id.type=COMPLEX_INLINE
# 分片算法属性配置$->{user_id % 2}
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_user_id.props.algorithm-expression=student_$->{class_name}_$->{ Math.abs((long)st_no.hashCode()) % 2}


## 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
#spring.shardingsphere.rules.sharding.tables.student.actual-data-nodes=database1.student_$->{['E008','E009']}_$->{0..1}
## 分片列名称
#spring.shardingsphere.rules.sharding.tables.student.table-strategy.complex.sharding-columns=id,class_name
## 分片算法名称 自定义名称
#spring.shardingsphere.rules.sharding.tables.student.table-strategy.complex.shardingAlgorithmName=alg_inline_user_id
##------------------------分片算法配置
## 行表达式分片算法
## 分片算法类型
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_user_id.type=CLASS_BASED
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_user_id.props.strategy=complex
## 分片算法属性配置$->{user_id % 2}
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_user_id.props.algorithmClassName=com.hb.shardingjdbc.MyComplexShardingAlgorithmDB

# 内存模式
spring.shardingsphere.mode.type=Memory
# 打印SQl
spring.shardingsphere.props.sql-show=true

